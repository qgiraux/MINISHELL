Simple command: list of words terminated by control operator |, ||, &&, (, )
Ex: (echo sa | grep k || echo lol)
	(cmd1 | cmd2 || cmd3)

echo sa << lol | grep ok
cmd1 | cmd2

->struct simple command


Pipeline: List of 1+ commands sepated by control operator |
Ex: echo sa | grep k || echo lol
	(cmd1 | cmd2 | cmd3 || cmd4)
	(pipe1 || pipe 2)

List: sequence of 1+ pipelines separated by && or ||
Ex:	echo sa | grep k || echo lol
	(cmd1 | cmd2 || cmd3)
	(pipe1 || pipe 2)
	(list)

Compound Commands: Grouping of listed Commands by ( )
Ex:	echo sa | grep k || echo lol
	(cmd1 | cmd2 || cmd3)
	(pipe1 || pipe 2)
	(list)
	group


ok && lol && (ok)
list && group
list && list
list

ok | ok | (a | b && c) && ok
Simple: cmd1 | cmd2 | (cmd 3 | cmd 4 && cmd 5) && cmd 6
Pipe: pipe1 | (pipe 2 && pipe0 3) && pipe0 6
List: pipe1 | (list 1) && pipe0 6
Group: pipe1 | group1 && pipe0 6
REC pipe: pipe2 && pipe0 6
REC list: list 2

Issues:

1-
redirection
	echo ok >> ok | grep k && echo lol
Solution:
	redirection are part of the command
	echo ok >> ok.txt | grep k && echo lol
		cmd1 | cmd2 && cmd3
		pipe1 && pipe2
	(cat < ok && cat ) <ok
		(cmd1 g&& cmd2 ) cmd3
		(list1) cmd3
		group1 cmd3

2-
Compound vs list
	echo ok && echo ko && (echo test)
Solution:
	list cmd can be simple or compound
		echo ok && echo ko && (echo test)
	cmd1 && cmd2 && (cmd 3)
	list1 && (list2)
	list1 && group1
	list3
		( (echo test) )
	( group1 )
	group2

3-
Parsing goal?
Solution: 	obtain a single command List
	;
Rejected Solution:	Parse until impossible (no error, redirections) or Error
Rejected Solution :			Parse until first or next command
		echo ok && echo ko && (echo test)
	cmd && echo ko && (echo test)
	pipe && echo ko && (echo test)
	*** && pipe && (echo test)
	*** ** *** && (pipe)
	*** ** *** && group
		echo ok > salut
	pipe > salut
	***


true && ( true ) false )
true && ( true ) && false )
true && ( true )&& echo ok